{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "The name and hostname of the VM"
      }
    },    
    "imageName": {
      "type": "string",
      "metadata": {
        "description": "The name of the custom VM image"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A1_v2",
      "allowedValues": [
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3"
      ],
      "metadata": {
        "description": "Size of the VM to deploy"
      }
    },
    "username": {
      "type": "string",
      "metadata": {
        "description": "User name for the VM admin account"
      }
    },
    "sshKey": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key for the VM admin account"
      }
    }
  },

  "variables": {
    "osDiskName":        "[concat(parameters('vmName'), '_osdisk')]",       
    "nsgName":           "[concat(parameters('vmName'), '_nsg')]",
    "nicName":           "[concat(parameters('vmName'), '_nic')]",
    "publicIpName":      "[concat(parameters('vmName'), '_ip')]",
    "publicIpType":      "Static",
    "vnetAddrSpace":     "10.0.0.0/16",
    "subnetName":        "default",
    "subnetPrefix":      "10.0.0.0/24",
    "vnetName":          "devops-vnet",
    "firewallPort":      "22",
    "sshKeyPath":        "[concat('/home/', parameters('username'), '/.ssh/authorized_keys')]"
  },

  "resources": [
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpName')]",
      "location": "[resourceGroup().location]",     
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIpType')]"
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
      ],      
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddrSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-09-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/subnets/', variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('username')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "id": "[resourceId('Microsoft.Compute/images', parameters('imageName'))]"
          },
          "osDisk": {
            "name": "[variables('osDiskName')]",            
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "false"
          }
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "name": "[variables('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",   
      "properties": {
        "securityRules": [
          {
            "name": "allow-connections",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('firewallPort')]",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          }
        ]
      }
    }
  ],
  
  "outputs": {
    "publicIp": {
      "type": "string",
      "value": "[reference(variables('publicIpName')).ipAddress]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh ', parameters('username'), '@', reference(variables('publicIpName')).ipAddress)]"
    }
  }
}